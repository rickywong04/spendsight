{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 28, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/server/db.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst createMockPrismaClient = () => {\n  return {\n    account: {\n      findMany: async () => {\n        return [\n          { id: \"1\", name: \"Checking Account\", balance: 2500.0, type: \"checking\" },\n          { id: \"2\", name: \"Savings Account\", balance: 10000.0, type: \"savings\" },\n          { id: \"3\", name: \"Credit Card\", balance: -450.0, type: \"credit\" },\n        ];\n      },\n    },\n    category: {\n      findMany: async () => {\n        return [\n          { id: \"1\", name: \"Groceries\", type: \"expense\" },\n          { id: \"2\", name: \"Utilities\", type: \"expense\" },\n          { id: \"3\", name: \"Dining\", type: \"expense\" },\n          { id: \"4\", name: \"Salary\", type: \"income\" },\n        ];\n      },\n    },\n    expense: {\n      findMany: async () => {\n        return [\n          { \n            id: \"1\", \n            amount: 45.99, \n            description: \"Grocery shopping\", \n            date: new Date(\"2023-04-15\"), \n            category: { id: \"1\", name: \"Groceries\", type: \"expense\" },\n            account: { id: \"1\", name: \"Checking Account\", type: \"checking\" }\n          },\n          { \n            id: \"2\", \n            amount: 89.99, \n            description: \"Phone bill\", \n            date: new Date(\"2023-04-10\"), \n            category: { id: \"2\", name: \"Utilities\", type: \"expense\" },\n            account: { id: \"1\", name: \"Checking Account\", type: \"checking\" }\n          },\n          { \n            id: \"3\", \n            amount: 12.50, \n            description: \"Coffee and snacks\", \n            date: new Date(\"2023-04-05\"), \n            category: { id: \"3\", name: \"Dining\", type: \"expense\" },\n            account: { id: \"3\", name: \"Credit Card\", type: \"credit\" }\n          },\n        ];\n      },\n      create: async (data) => {\n        console.log(\"Mock expense created:\", data);\n        return { id: \"new-expense\", ...data.data };\n      },\n    },\n    income: {\n      findMany: async () => {\n        return [\n          { \n            id: \"1\", \n            amount: 3500, \n            description: \"Monthly Salary\", \n            date: new Date(\"2023-04-01\"), \n            category: { id: \"4\", name: \"Salary\", type: \"income\" },\n            account: { id: \"1\", name: \"Checking Account\", type: \"checking\" }\n          },\n        ];\n      },\n      create: async (data) => {\n        console.log(\"Mock income created:\", data);\n        return { id: \"new-income\", ...data.data };\n      },\n    },\n    user: {\n      findMany: async () => {\n        return [\n          { id: \"1\", name: \"Demo User\", email: \"user@example.com\" }\n        ];\n      },\n    },\n    $connect: async () => {},\n    $disconnect: async () => {},\n  };\n};\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | ReturnType<typeof createMockPrismaClient> | undefined;\n};\n\n// Use a mock database in development when real database isn't available\nlet db: PrismaClient | ReturnType<typeof createMockPrismaClient>;\n\ntry {\n  if (process.env.NODE_ENV === \"production\") {\n    db = new PrismaClient();\n  } else {\n    if (!globalForPrisma.prisma) {\n      try {\n        globalForPrisma.prisma = new PrismaClient({\n          log: [\"query\", \"error\", \"warn\"],\n        });\n      } catch (error) {\n        console.warn(\"Failed to connect to database, using mock database:\", error);\n        globalForPrisma.prisma = createMockPrismaClient();\n      }\n    }\n    db = globalForPrisma.prisma;\n  }\n} catch (error) {\n  console.warn(\"Database connection error, using mock database:\", error);\n  db = createMockPrismaClient();\n}\n\nexport { db };\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,yBAAyB;IAC7B,OAAO;QACL,SAAS;YACP,UAAU;gBACR,OAAO;oBACL;wBAAE,IAAI;wBAAK,MAAM;wBAAoB,SAAS;wBAAQ,MAAM;oBAAW;oBACvE;wBAAE,IAAI;wBAAK,MAAM;wBAAmB,SAAS;wBAAS,MAAM;oBAAU;oBACtE;wBAAE,IAAI;wBAAK,MAAM;wBAAe,SAAS,CAAC;wBAAO,MAAM;oBAAS;iBACjE;YACH;QACF;QACA,UAAU;YACR,UAAU;gBACR,OAAO;oBACL;wBAAE,IAAI;wBAAK,MAAM;wBAAa,MAAM;oBAAU;oBAC9C;wBAAE,IAAI;wBAAK,MAAM;wBAAa,MAAM;oBAAU;oBAC9C;wBAAE,IAAI;wBAAK,MAAM;wBAAU,MAAM;oBAAU;oBAC3C;wBAAE,IAAI;wBAAK,MAAM;wBAAU,MAAM;oBAAS;iBAC3C;YACH;QACF;QACA,SAAS;YACP,UAAU;gBACR,OAAO;oBACL;wBACE,IAAI;wBACJ,QAAQ;wBACR,aAAa;wBACb,MAAM,IAAI,KAAK;wBACf,UAAU;4BAAE,IAAI;4BAAK,MAAM;4BAAa,MAAM;wBAAU;wBACxD,SAAS;4BAAE,IAAI;4BAAK,MAAM;4BAAoB,MAAM;wBAAW;oBACjE;oBACA;wBACE,IAAI;wBACJ,QAAQ;wBACR,aAAa;wBACb,MAAM,IAAI,KAAK;wBACf,UAAU;4BAAE,IAAI;4BAAK,MAAM;4BAAa,MAAM;wBAAU;wBACxD,SAAS;4BAAE,IAAI;4BAAK,MAAM;4BAAoB,MAAM;wBAAW;oBACjE;oBACA;wBACE,IAAI;wBACJ,QAAQ;wBACR,aAAa;wBACb,MAAM,IAAI,KAAK;wBACf,UAAU;4BAAE,IAAI;4BAAK,MAAM;4BAAU,MAAM;wBAAU;wBACrD,SAAS;4BAAE,IAAI;4BAAK,MAAM;4BAAe,MAAM;wBAAS;oBAC1D;iBACD;YACH;YACA,QAAQ,OAAO;gBACb,QAAQ,GAAG,CAAC,yBAAyB;gBACrC,OAAO;oBAAE,IAAI;oBAAe,GAAG,KAAK,IAAI;gBAAC;YAC3C;QACF;QACA,QAAQ;YACN,UAAU;gBACR,OAAO;oBACL;wBACE,IAAI;wBACJ,QAAQ;wBACR,aAAa;wBACb,MAAM,IAAI,KAAK;wBACf,UAAU;4BAAE,IAAI;4BAAK,MAAM;4BAAU,MAAM;wBAAS;wBACpD,SAAS;4BAAE,IAAI;4BAAK,MAAM;4BAAoB,MAAM;wBAAW;oBACjE;iBACD;YACH;YACA,QAAQ,OAAO;gBACb,QAAQ,GAAG,CAAC,wBAAwB;gBACpC,OAAO;oBAAE,IAAI;oBAAc,GAAG,KAAK,IAAI;gBAAC;YAC1C;QACF;QACA,MAAM;YACJ,UAAU;gBACR,OAAO;oBACL;wBAAE,IAAI;wBAAK,MAAM;wBAAa,OAAO;oBAAmB;iBACzD;YACH;QACF;QACA,UAAU,WAAa;QACvB,aAAa,WAAa;IAC5B;AACF;AAEA,MAAM,kBAAkB;AAIxB,wEAAwE;AACxE,IAAI;AAEJ,IAAI;IACF,uCAA2C;;IAE3C,OAAO;QACL,IAAI,CAAC,gBAAgB,MAAM,EAAE;YAC3B,IAAI;gBACF,gBAAgB,MAAM,GAAG,IAAI,6HAAA,CAAA,eAAY,CAAC;oBACxC,KAAK;wBAAC;wBAAS;wBAAS;qBAAO;gBACjC;YACF,EAAE,OAAO,OAAO;gBACd,QAAQ,IAAI,CAAC,uDAAuD;gBACpE,gBAAgB,MAAM,GAAG;YAC3B;QACF;QACA,KAAK,gBAAgB,MAAM;IAC7B;AACF,EAAE,OAAO,OAAO;IACd,QAAQ,IAAI,CAAC,mDAAmD;IAChE,KAAK;AACP","debugId":null}},
    {"offset": {"line": 224, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/server/api/trpc.ts"],"sourcesContent":["/**\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\n * 1. You want to modify request context (see Part 1).\n * 2. You want to create a new middleware or type of procedure (see Part 3).\n *\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\n * need to use are documented accordingly near the end.\n */\nimport { initTRPC } from \"@trpc/server\";\nimport superjson from \"superjson\";\nimport { ZodError } from \"zod\";\n\nimport { db } from \"~/server/db\";\n\n/**\n * 1. CONTEXT\n *\n * This section defines the \"contexts\" that are available in the backend API.\n *\n * These allow you to access things when processing a request, like the database, the session, etc.\n *\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\n * wrap this and provides the required context.\n *\n * @see https://trpc.io/docs/server/context\n */\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\n  return {\n    db,\n    ...opts,\n  };\n};\n\n/**\n * 2. INITIALIZATION\n *\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\n * errors on the backend.\n */\nconst t = initTRPC.context<typeof createTRPCContext>().create({\n  transformer: superjson,\n  errorFormatter({ shape, error }) {\n    return {\n      ...shape,\n      data: {\n        ...shape.data,\n        zodError:\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\n      },\n    };\n  },\n});\n\n/**\n * Create a server-side caller.\n *\n * @see https://trpc.io/docs/server/server-side-calls\n */\nexport const createCallerFactory = t.createCallerFactory;\n\n/**\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\n *\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\n * \"/src/server/api/routers\" directory.\n */\n\n/**\n * This is how you create new routers and sub-routers in your tRPC API.\n *\n * @see https://trpc.io/docs/router\n */\nexport const createTRPCRouter = t.router;\n\n/**\n * Middleware for timing procedure execution and adding an artificial delay in development.\n *\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\n * network latency that would occur in production but not in local development.\n */\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\n  const start = Date.now();\n\n  if (t._config.isDev) {\n    // artificial delay in dev\n    const waitMs = Math.floor(Math.random() * 400) + 100;\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\n  }\n\n  const result = await next();\n\n  const end = Date.now();\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\n\n  return result;\n});\n\n/**\n * Public (unauthenticated) procedure\n *\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\n * guarantee that a user querying is authorized, but you can still access user session data if they\n * are logged in.\n */\nexport const publicProcedure = t.procedure.use(timingMiddleware);\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;AACD;AAAA;AACA;AACA;AAEA;;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,IAAA,mHAAA,CAAA,KAAE;QACF,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,gMAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,0IAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,oIAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC","debugId":null}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\n\nexport const postRouter = createTRPCRouter({\n  hello: publicProcedure\n    .input(z.object({ text: z.string() }))\n    .query(({ input }) => {\n      return {\n        greeting: `Hello ${input.text}`,\n      };\n    }),\n\n  create: publicProcedure\n    .input(z.object({ name: z.string().min(1) }))\n    .mutation(async ({ ctx, input }) => {\n      return ctx.db.post.create({\n        data: {\n          name: input.name,\n        },\n      });\n    }),\n\n  getLatest: publicProcedure.query(async ({ ctx }) => {\n    const post = await ctx.db.post.findFirst({\n      orderBy: { createdAt: \"desc\" },\n    });\n\n    return post ?? null;\n  }),\n});\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEO,MAAM,aAAa,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,OAAO,4HAAA,CAAA,kBAAe,CACnB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM;IAAG,IAClC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;QACf,OAAO;YACL,UAAU,CAAC,MAAM,EAAE,MAAM,IAAI,EAAE;QACjC;IACF;IAEF,QAAQ,4HAAA,CAAA,kBAAe,CACpB,KAAK,CAAC,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,MAAM,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;IAAG,IACzC,QAAQ,CAAC,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE;QAC7B,OAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACxB,MAAM;gBACJ,MAAM,MAAM,IAAI;YAClB;QACF;IACF;IAEF,WAAW,4HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;QAC7C,MAAM,OAAO,MAAM,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC;YACvC,SAAS;gBAAE,WAAW;YAAO;QAC/B;QAEA,OAAO,QAAQ;IACjB;AACF","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/server/api/routers/finance.ts"],"sourcesContent":["import { z } from \"zod\";\n\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\nimport { Prisma } from \"@prisma/client\";\n\nexport const financeRouter = createTRPCRouter({\n  // Get account summary\n  getAccounts: publicProcedure.query(async ({ ctx }) => {\n    try {\n      const accounts = await ctx.db.account.findMany({\n        include: {\n          _count: {\n            select: { expenses: true, incomes: true },\n          },\n        },\n      });\n      return accounts;\n    } catch (error) {\n      console.error(\"Error fetching accounts:\", error);\n      return [];\n    }\n  }),\n  \n  // Get categories\n  getCategories: publicProcedure.query(async ({ ctx }) => {\n    try {\n      const categories = await ctx.db.category.findMany();\n      return categories;\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      return [];\n    }\n  }),\n  \n  // Get recent expenses\n  getRecentExpenses: publicProcedure\n    .input(z.object({ limit: z.number().default(10) }))\n    .query(async ({ ctx, input }) => {\n      try {\n        const expenses = await ctx.db.expense.findMany({\n          take: input.limit,\n          orderBy: { date: \"desc\" },\n          include: {\n            category: true,\n            account: true,\n          },\n        });\n        return expenses;\n      } catch (error) {\n        console.error(\"Error fetching expenses:\", error);\n        return [];\n      }\n    }),\n  \n  // Get recent incomes\n  getRecentIncomes: publicProcedure\n    .input(z.object({ limit: z.number().default(10) }))\n    .query(async ({ ctx, input }) => {\n      try {\n        const incomes = await ctx.db.income.findMany({\n          take: input.limit,\n          orderBy: { date: \"desc\" },\n          include: {\n            category: true,\n            account: true,\n          },\n        });\n        return incomes;\n      } catch (error) {\n        console.error(\"Error fetching incomes:\", error);\n        return [];\n      }\n    }),\n  \n  // Add new expense\n  addExpense: publicProcedure\n    .input(\n      z.object({\n        amount: z.number().positive(),\n        description: z.string(),\n        date: z.date(),\n        userId: z.string(),\n        accountId: z.string(),\n        categoryId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const expense = await ctx.db.expense.create({\n          data: input,\n        });\n        \n        // Update account balance\n        await ctx.db.account.update({\n          where: { id: input.accountId },\n          data: {\n            balance: { decrement: input.amount },\n          },\n        });\n        \n        return expense;\n      } catch (error) {\n        console.error(\"Error adding expense:\", error);\n        throw error;\n      }\n    }),\n  \n  // Add new income\n  addIncome: publicProcedure\n    .input(\n      z.object({\n        amount: z.number().positive(),\n        description: z.string(),\n        date: z.date(),\n        userId: z.string(),\n        accountId: z.string(),\n        categoryId: z.string(),\n      }),\n    )\n    .mutation(async ({ ctx, input }) => {\n      try {\n        const income = await ctx.db.income.create({\n          data: input,\n        });\n        \n        // Update account balance\n        await ctx.db.account.update({\n          where: { id: input.accountId },\n          data: {\n            balance: { increment: input.amount },\n          },\n        });\n        \n        return income;\n      } catch (error) {\n        console.error(\"Error adding income:\", error);\n        throw error;\n      }\n    }),\n}); "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/server/api/root.ts"],"sourcesContent":["import { postRouter } from \"~/server/api/routers/post\";\nimport { financeRouter } from \"~/server/api/routers/finance\";\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\n\n/**\n * This is the primary router for your server.\n *\n * All routers added in /api/routers should be manually added here.\n */\nexport const appRouter = createTRPCRouter({\n  post: postRouter,\n  finance: financeRouter,\n});\n\n// export type definition of API\nexport type AppRouter = typeof appRouter;\n\n/**\n * Create a server-side caller for the tRPC API.\n * @example\n * const trpc = createCaller(createContext);\n * const res = await trpc.post.all();\n *       ^? Post[]\n */\nexport const createCaller = createCallerFactory(appRouter);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAOO,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,uIAAA,CAAA,aAAU;IAChB,SAAS,0IAAA,CAAA,gBAAa;AACxB;AAYO,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,sBAAmB,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/trpc/query-client.ts"],"sourcesContent":["import {\n  defaultShouldDehydrateQuery,\n  QueryClient,\n} from \"@tanstack/react-query\";\nimport SuperJSON from \"superjson\";\n\nexport const createQueryClient = () =>\n  new QueryClient({\n    defaultOptions: {\n      queries: {\n        // With SSR, we usually want to set some default staleTime\n        // above 0 to avoid refetching immediately on the client\n        staleTime: 30 * 1000,\n      },\n      dehydrate: {\n        serializeData: SuperJSON.serialize,\n        shouldDehydrateQuery: (query) =>\n          defaultShouldDehydrateQuery(query) ||\n          query.state.status === \"pending\",\n      },\n      hydrate: {\n        deserializeData: SuperJSON.deserialize,\n      },\n    },\n  });\n"],"names":[],"mappings":";;;AAAA;AAAA;AAIA;;;AAEO,MAAM,oBAAoB,IAC/B,IAAI,6KAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,0IAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,2KAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,0IAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\n\nimport { createHydrationHelpers } from \"@trpc/react-query/rsc\";\nimport { headers } from \"next/headers\";\nimport { cache } from \"react\";\n\nimport { createCaller, type AppRouter } from \"~/server/api/root\";\nimport { createTRPCContext } from \"~/server/api/trpc\";\nimport { createQueryClient } from \"./query-client\";\n\n/**\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\n * handling a tRPC call from a React Server Component.\n */\nconst createContext = cache(async () => {\n  const heads = new Headers(await headers());\n  heads.set(\"x-trpc-source\", \"rsc\");\n\n  return createTRPCContext({\n    headers: heads,\n  });\n});\n\nconst getQueryClient = cache(createQueryClient);\nconst caller = createCaller(createContext);\n\nexport const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(\n  caller,\n  getQueryClient,\n);\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,4HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEA,MAAM,iBAAiB,CAAA,GAAA,qMAAA,CAAA,QAAK,AAAD,EAAE,8HAAA,CAAA,oBAAiB;AAC9C,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE;AAErB,MAAM,EAAE,MAAM,GAAG,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,wJAAA,CAAA,yBAAsB,AAAD,EAC/D,QACA","debugId":null}},
    {"offset": {"line": 569, "column": 0}, "map": {"version":3,"sources":["file:///Users/rickywong/spendsight/src/app/page.tsx"],"sourcesContent":["import Link from \"next/link\";\nimport { api } from \"~/trpc/server\";\n\nexport default async function Home() {\n  // This will use our mock database implementation\n  const accounts = await api.finance.getAccounts();\n  \n  return (\n    <main className=\"min-h-screen bg-gradient-to-b from-[#2e026d] to-[#15162c] text-white\">\n      <div className=\"container mx-auto px-4 py-16\">\n        <h1 className=\"mb-8 text-center text-5xl font-extrabold tracking-tight sm:text-[5rem]\">\n          <span className=\"text-[hsl(280,100%,70%)]\">SpendSight</span>\n        </h1>\n        <p className=\"mb-12 text-center text-2xl font-semibold\">\n          A Database-Focused Financial Management Application\n        </p>\n        \n        <div className=\"grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3\">\n          {/* Dashboard Cards */}\n          <DashboardCard title=\"Accounts\" icon=\"💰\">\n            <p className=\"text-lg\">Manage your bank accounts, credit cards, and more</p>\n            <p className=\"mt-2 text-sm text-purple-300\">{accounts.length} accounts available</p>\n            <Link \n              href=\"/accounts\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              View Accounts\n            </Link>\n          </DashboardCard>\n          \n          <DashboardCard title=\"Expenses\" icon=\"💸\">\n            <p className=\"text-lg\">Track and categorize your spending</p>\n            <Link \n              href=\"/expenses\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              View Expenses\n            </Link>\n          </DashboardCard>\n          \n          <DashboardCard title=\"Income\" icon=\"📈\">\n            <p className=\"text-lg\">Record your earnings and revenue</p>\n            <Link \n              href=\"/income\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              View Income\n            </Link>\n          </DashboardCard>\n          \n          <DashboardCard title=\"Categories\" icon=\"🏷️\">\n            <p className=\"text-lg\">Organize transactions with custom categories</p>\n            <Link \n              href=\"/categories\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              Manage Categories\n            </Link>\n          </DashboardCard>\n          \n          <DashboardCard title=\"Reports\" icon=\"📊\">\n            <p className=\"text-lg\">Analyze your finances with detailed reports</p>\n            <Link \n              href=\"/reports\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              View Reports\n            </Link>\n          </DashboardCard>\n          \n          <DashboardCard title=\"Settings\" icon=\"⚙️\">\n            <p className=\"text-lg\">Configure your account preferences</p>\n            <Link \n              href=\"/settings\" \n              className=\"mt-4 inline-block rounded bg-purple-700 px-4 py-2 font-semibold hover:bg-purple-600\"\n            >\n              Open Settings\n            </Link>\n          </DashboardCard>\n        </div>\n      </div>\n    </main>\n  );\n}\n\n// Dashboard Card Component\nfunction DashboardCard({ \n  title, \n  icon, \n  children \n}: { \n  title: string; \n  icon: string; \n  children: React.ReactNode;\n}) {\n  return (\n    <div className=\"rounded-lg bg-white/10 p-6 transition-all hover:bg-white/20\">\n      <div className=\"mb-4 flex items-center gap-3\">\n        <span className=\"text-3xl\">{icon}</span>\n        <h2 className=\"text-2xl font-bold\">{title}</h2>\n      </div>\n      <div>{children}</div>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;;AAEe,eAAe;IAC5B,iDAAiD;IACjD,MAAM,WAAW,MAAM,qHAAA,CAAA,MAAG,CAAC,OAAO,CAAC,WAAW;IAE9C,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAG,WAAU;8BACZ,cAAA,8OAAC;wBAAK,WAAU;kCAA2B;;;;;;;;;;;8BAE7C,8OAAC;oBAAE,WAAU;8BAA2C;;;;;;8BAIxD,8OAAC;oBAAI,WAAU;;sCAEb,8OAAC;4BAAc,OAAM;4BAAW,MAAK;;8CACnC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC;oCAAE,WAAU;;wCAAgC,SAAS,MAAM;wCAAC;;;;;;;8CAC7D,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;sCAKH,8OAAC;4BAAc,OAAM;4BAAW,MAAK;;8CACnC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;sCAKH,8OAAC;4BAAc,OAAM;4BAAS,MAAK;;8CACjC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;sCAKH,8OAAC;4BAAc,OAAM;4BAAa,MAAK;;8CACrC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;sCAKH,8OAAC;4BAAc,OAAM;4BAAU,MAAK;;8CAClC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;sCAKH,8OAAC;4BAAc,OAAM;4BAAW,MAAK;;8CACnC,8OAAC;oCAAE,WAAU;8CAAU;;;;;;8CACvB,8OAAC,4JAAA,CAAA,UAAI;oCACH,MAAK;oCACL,WAAU;8CACX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQb;AAEA,2BAA2B;AAC3B,SAAS,cAAc,EACrB,KAAK,EACL,IAAI,EACJ,QAAQ,EAKT;IACC,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAK,WAAU;kCAAY;;;;;;kCAC5B,8OAAC;wBAAG,WAAU;kCAAsB;;;;;;;;;;;;0BAEtC,8OAAC;0BAAK;;;;;;;;;;;;AAGZ","debugId":null}}]
}